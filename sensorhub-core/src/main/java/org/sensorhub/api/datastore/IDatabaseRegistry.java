/***************************** BEGIN LICENSE BLOCK ***************************

The contents of this file are subject to the Mozilla Public License, v. 2.0.
If a copy of the MPL was not distributed with this file, You can obtain one
at http://mozilla.org/MPL/2.0/.

Software distributed under the License is distributed on an "AS IS" basis,
WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
for the specific language governing rights and limitations under the License.

Copyright (C) 2019 Sensia Software LLC. All Rights Reserved.

******************************* END LICENSE BLOCK ***************************/

package org.sensorhub.api.datastore;

import java.math.BigInteger;
import java.util.Collection;
import org.sensorhub.api.procedure.IProcedureObsDatabase;


/**
 * <p>
 * Interface for the main database registry on a sensor hub.
 * </p><p>
 * This database registry keeps track of which database contains data for each
 * procedure registered on the hub.
 * </p><p>
 * It also exposes a federated database which provides read-only access
 * to all historical observations available from this hub, along with the
 * corresponding procedures, datastreams and features of interest metadata.
 * The federated database aggregates data from all databases registered
 * with this registry.
 * </p><p>
 * With a minimum setup (i.e. no database configured), the federated
 * database gives access to the latest state of all registered procedures
 * (e.g. latest procedure description, latest observations, latest observed
 * FOI) but no historical data will be available.
 * </p>
 *
 * @author Alex Robin
 * @date Sep 18, 2019
 */
public interface IDatabaseRegistry
{

    /**
     * Sets the database that should be queried when no other
     * @param db
     *
    void setDefaultDatabase(IHistoricalObsDatabase db);*/


    /**
     * Registers a procedure to observation database mapping.
     * <p>This can be called multiple times to register multiple mappings with the
     * same database instance. However, several databases cannot contain data for
     * the same procedure so a given procedure UID cannot be mapped to different
     * database instances using this method.</p>
     * <p>Note that the database is not required to contain data for the specified
     * procedure at the time of the call.</p>
     * @param procedureUID Unique ID of procedure to associate with the database
     * @param db A database instance
     */
    void register(String procedureUID, IProcedureObsDatabase db);


    /**
     * Helper method to register several procedure -> database mappings at once.
     * @see {@link #register(String, IProcedureObsDatabase)}.
     * @param procedureUIDs Unique IDs of procedures to associate with the database
     * @param db The database instance
     */
    default void register(Collection<String> procedureUIDs, IProcedureObsDatabase db)
    {
        for (String uid: procedureUIDs)
            register(uid, db);
    }


    /**
     * Unregisters a procedure to observation database mapping.
     * @param procedureUID Unique ID of procedures previously associated with
     * the specified database
     * @param db A database instance
     */
    void unregister(String procedureUID, IProcedureObsDatabase db);


    /**
     * Helper method to unregister several procedure -> database mappings at once.
     * @see {@link #unregister(String, IProcedureObsDatabase)}.
     * @param procedureUIDs Unique IDs of procedures previously associated with
     * the specified database
     * @param db A database instance
     */
    default void unregister(Collection<String> procedureUIDs, IProcedureObsDatabase db)
    {
        for (String uid: procedureUIDs)
            unregister(uid, db);
    }


    /**
     * Checks if a database is currently handling data generated by the
     * specified procedure
     * @param procedureUID Unique ID of the procedure
     * @return true if a database has been registered, false otherwise
     */
    boolean hasDatabase(String procedureUID);


    /**
     * Provides direct (potentially read/write) access to the database that is
     * currently handling observation data from the specified procedure
     * @param procedureUID Unique ID of the procedure
     * @return The database instance or null if none has been registered
     * for the specified procedure
     */
    IProcedureObsDatabase getDatabase(String procedureUID);


    /**
     * @return This hub's federated observation database.<br/>
     * See class description for more information about the federated DB
     */
    IProcedureObsDatabase getFederatedObsDatabase();
    
    
    //Collection<IProcedureObsDatabase> getProcedureObsDatabases();
    //Collection<IProcedureObsDatabase> getProcedureObsDatabaseViews();   
    

    /**
     * Convert from a local DB entry ID to the public ID
     * @param databaseID ID of database as registered in this registry
     * @param dbLocalID Internal ID of database entry
     * @return The public ID exposed by the registry
     */
    long getPublicID(int databaseID, long dbLocalID);
    BigInteger getPublicID(int databaseID, BigInteger dbLocalID);


    /**
     * Convert from a public registry ID to a local DB entry ID
     * @param databaseID ID of database as registered in this registry
     * @param publicID Public ID of entry
     * @return The entry ID used internally by the database
     */
    long getLocalID(int databaseID, long publicID);
    BigInteger getLocalID(int databaseID, BigInteger publicID);


    /**
     * Extract the database ID from a public ID
     * @param publicID Public ID of entry
     * @return The database ID
     */
    int getDatabaseID(long publicID);
}
