ext.oshCoreVersion = '2.0.0'


buildscript {
  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath "biz.aQute.bnd:biz.aQute.bnd.gradle:5.3.0"
  }
}

    
allprojects  {
  group = 'org.sensorhub'

  repositories {
    maven { url "https://repo.maven.apache.org/maven2" }
  }
  
  // set build number to HEAD SHA-1
  def stdout = new ByteArrayOutputStream()
  exec {
      commandLine('git','rev-parse','--short','HEAD')
      standardOutput = stdout
      // hide errors and don't throw exception if not a git repo
      errorOutput = new ByteArrayOutputStream()
      ignoreExitValue = true
  }
  ext.buildNumber = "$stdout".trim()
}


subprojects {
  apply plugin: 'java-library'
  apply plugin: 'java-test-fixtures'
  apply plugin: 'eclipse'
  apply plugin: 'maven-publish'
  
  sourceCompatibility = 11
  targetCompatibility = 11
  ext.details = null
  ext.pom = {} // pom data that subprojects can append to
  
  tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:-options"
  }
  
  tasks.withType(Javadoc) {
    options.encoding = 'UTF-8'
    options.addStringOption('Xdoclint:none', '-quiet')
  }
  
  eclipse {
    classpath {
      downloadJavadoc = true
      file.whenMerged { 
        entries.each {
          if (it.hasProperty('exported'))
            it.exported = true
        }
      }
    }
  }
    
  // custom dependency configurations for embedding jars in OSGi bundle
  configurations {
    embeddedApi
    embeddedImpl
    embedded
    embedded.extendsFrom(embeddedApi, embeddedImpl)
    api.extendsFrom(embeddedApi)
    implementation.extendsFrom(embeddedImpl)  
  }

  // default test dependencies
  dependencies {
    testImplementation 'junit:junit:4.13'
    testImplementation 'xmlunit:xmlunit:1.6'
  }

  // print test names
  test {
    testLogging {
      events 'PASSED', 'FAILED'
      showCauses true
      showStackTraces true
      exceptionFormat 'full'
    }
  }
  
  // OSGi manifest generation task
  task osgiManifest {    
    // need to do this after subproject is processed and dependencies are resolved!
    doLast {    
      project.osgi {
        manifest {
          from jar.manifest
                              
          // default osgi settings if not overriden by project
          if (!attributes['Bundle-Activator'])
            attributes('Bundle-Activator': 'org.sensorhub.impl.Activator')
          if (!attributes['Import-Package'])
            attributes 'Import-Package': '!java.*,!com.sun.*,!sun.*,!javax.xml.*,!org.xml.sax.*,!org.w3c.dom.*,*'
          //attributes '-noimportjava': true
          //attributes '-sources': true
          
          // add embedded jars to OSGi classpath
          // only add jars that were not substituted with newer version by gradle
          def classpath = '.'
          def embeddedJars = ''
          def runtimeDeps = project.configurations.runtimeClasspath.collect { it.name };
          project.configurations.embedded.each {
            if (runtimeDeps.contains(it.name)) {
              embeddedJars += 'lib/' + it.name + '=' + it.name + ';lib:=true,'
            }
          }
          attributes '-includeresource': embeddedJars
          
          // native libs location
          def resourcesFolder = new File(projectDir, '/src/main/resources')
          def nativeFolder = new File(resourcesFolder, '/lib/native')
          if (nativeFolder.exists()) {
            def nativePaths = ''
            fileTree(dir: nativeFolder).files.each {
              def path = resourcesFolder.toPath().relativize(it.toPath())
              def osname = path.getName(2)
              def proc = path.getName(3)
              if (!nativePaths.isEmpty())				
                nativePaths += ', '
              nativePaths += path.toString().replace('\\', '/') + '; '
              nativePaths += 'osname=' + osname + '; '
              nativePaths += 'processor=' + proc
            }
            attributes 'Bundle-NativeCode': nativePaths
          }
        }
      }
    }
  }
  
  // OSGi bundle jar task
  task osgi(type: aQute.bnd.gradle.Bundle) {
    archiveClassifier = 'bundle'
    from project.sourceSets.main.output 
  }
  
  osgi.dependsOn osgiManifest
  assemble.dependsOn osgi

  // do stuff at the end in case subprojects add extra info
  afterEvaluate { project ->
    // jar manifest entries
    project.jar {
      manifest {
        // main info
        attributes 'Bundle-SymbolicName': project.group + '.' + project.name
        if (project.description != null && !attributes['Bundle-Name'])
          attributes 'Bundle-Name': project.description
        if (project.details != null)
          attributes 'Bundle-Description': project.details
        attributes 'Bundle-Version': project.version
        if (project.buildNumber != null && !project.buildNumber.isEmpty())
          attributes 'Bundle-BuildNumber': project.buildNumber
        if (!attributes['Bundle-License'])
          attributes 'Bundle-License': 'MPL 2.0 (http://mozilla.org/MPL/2.0)'
        if (!attributes['Bundle-Copyright'] && attributes['Bundle-Vendor'])
          attributes 'Bundle-Copyright': 'Copyright (c) ' + attributes['Bundle-Vendor'] + '. All Rights Reserved'
      }
    }  
  
    // maven artifact content
    project.publishing {
      publications {
        mavenJava(MavenPublication) {
          from components.java
          pom.withXml {
            asNode().get('version') + ({
              resolveStrategy = Closure.DELEGATE_FIRST
              name project.description
              if (project.details != null)
                description project.details
              url 'http://www.opensensorhub.org'
              licenses {
                license {
                  name 'Mozilla Public License Version 2.0'
                  url 'http://www.mozilla.org/MPL/2.0'
                  distribution 'repo'
                }
              }
              def repoName = projectDir.parentFile.name
              scm {
                url 'https://github.com/opensensorhub/' + repoName + '/tree/master/' + project.name
                connection 'scm:git:git://github.com/opensensorhub/' + repoName + '.git'
              }
              issueManagement {
                url 'https://github.com/opensensorhub/' + repoName + '/issues'
                system 'GitHub Issues'
              }                         
            } >> project.pom)
          }
        }
      } 
    }
  }

  // disable jar task if no source is included
  if (!new File(project.projectDir, 'src').exists()) {
	  tasks.osgi.enabled = false
    tasks.jar.enabled = false
  }
  
  // custom task to install in local maven repo
  task install
  install.dependsOn(build)
  install.dependsOn(publishToMavenLocal)  
}


// distribution zip files
apply plugin: 'java-library'
apply plugin: 'distribution'
targetCompatibility = 1.11
tasks.jar.enabled = false
afterEvaluate { // disable all distTar tasks
  tasks.each {
    if (it.name.endsWith('istTar'))
      it.enabled = false
  }
}


// collect all configured repositories in parent build
gradle.projectsEvaluated { g ->
  if (gradle.parent != null) {
    gradle.parent.rootProject {
      repositories.addAll(g.rootProject.repositories)
    }
  }
}
