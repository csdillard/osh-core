ext.oshCoreVersion = '1.4.0'


allprojects  {
  group = 'org.sensorhub'

  repositories {
    maven { url "https://repo.maven.apache.org/maven2" }
  }
  
  // set build number to HEAD SHA-1
  def stdout = new ByteArrayOutputStream()
  exec {
      commandLine('git','rev-parse','--short','HEAD')
      standardOutput = stdout
      // hide errors and don't throw exception if not a git repo
      errorOutput = new ByteArrayOutputStream()
      ignoreExitValue = true
  }
  ext.buildNumber = "$stdout".trim()
}


subprojects {
  apply plugin: 'java-library'
  apply plugin: 'java-test-fixtures'
  apply plugin: 'eclipse'
  apply plugin: 'maven-publish'
  
  sourceCompatibility = 1.8
  targetCompatibility = 1.8
  ext.details = null
  ext.pom = {} // pom data that subprojects can append to
  
  tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:-options"
  }
  
  tasks.withType(Javadoc) {
    options.encoding = 'UTF-8'
    options.addStringOption('Xdoclint:none', '-quiet')
  }
  
  eclipse {
    classpath {
      downloadJavadoc = true
      file.whenMerged { 
        entries.each {
          if (it.hasProperty('exported'))
            it.exported = true
        }
      }
    }
  }
    
  // add embedded config for embedding jars in bundle
  configurations {
    embedded
    implementation {
      extendsFrom embedded
    }
  }

  // default test dependencies
  dependencies {
    testImplementation 'junit:junit:4.11'
    testImplementation 'xmlunit:xmlunit:1.6'
  }

  // print test names
  test {
    testLogging {
      events 'PASSED', 'FAILED'
      showCauses true
      showStackTraces true
      exceptionFormat 'full'
    }
  }
  
  // patch for missing 'instruction' method following deprecation of gradle plugin
  jar {
    manifest {
      ext.instruction = { name, value ->
        def attrMap = [(name): value]
        attributes attrMap
      }
    }
  }
  
  // configure packaging in separate task
  task jarConfig {
    doLast {    
      // jar content
      project.jar { 
        into('lib') {
          from {
            project.configurations.embedded
          }
        }
        
        // OSGi manifest info
        manifest {
          // main info
          attributes 'Bundle-SymbolicName': project.group + '.' + project.name
          attributes 'Bundle-Version': project.version
          if (project.description != null)
            attributes 'Bundle-Name': project.description
          if (project.details != null)
            attributes 'Bundle-Description': project.details
          
          // bundle dependencies
          def oshDeps = ''
          project.configurations.runtimeClasspath.each {
            if (it.name.startsWith('sensorhub'))
              oshDeps += it.name + ','
          }
          attributes 'OSH-Dependencies': oshDeps
          
          // build number
          if (project.buildNumber != null && !project.buildNumber.isEmpty())
            attributes 'Bundle-BuildNumber': project.buildNumber
        }
      }
    }
  }
  jar.dependsOn(jarConfig)

  // do maven stuff at the end in case subprojects add extra info
  afterEvaluate { project ->    
    // maven artifact content
    project.publishing {
      publications {
        mavenJava(MavenPublication) {
          from components.java
          pom.withXml {
            asNode().get('version') + ({
              resolveStrategy = Closure.DELEGATE_FIRST
              name project.description
              if (project.details != null)
                description project.details
              url 'http://www.opensensorhub.org'
              licenses {
                license {
                  name 'Mozilla Public License Version 2.0'
                  url 'http://www.mozilla.org/MPL/2.0'
                  distribution 'repo'
                }
              }
              def repoName = projectDir.parentFile.name
              scm {
                url 'https://github.com/opensensorhub/' + repoName + '/tree/master/' + project.name
                connection 'scm:git:git://github.com/opensensorhub/' + repoName + '.git'
              }
              issueManagement {
                url 'https://github.com/opensensorhub/' + repoName + '/issues'
                system 'GitHub Issues'
              }                         
            } >> project.pom)
          }
        }
      } 
    }
  }

  // disable jar task if no source is included
  if (!new File(project.projectDir, 'src').exists()) {
     tasks.jarConfig.enabled = false
     tasks.jar.enabled = false
  }
  
  // custom task to install in local maven repo
  task install
  install.dependsOn(build)
  install.dependsOn(publishToMavenLocal)  
}


// distribution zip files
apply plugin: 'java-library'
apply plugin: 'distribution'
targetCompatibility = 1.8
tasks.jar.enabled = false
afterEvaluate { // disable all distTar tasks
  tasks.each {
    if (it.name.endsWith('istTar'))
      it.enabled = false
  }
}


// collect all configured repositories in parent build
gradle.projectsEvaluated { g ->
  if (gradle.parent != null) {
    gradle.parent.rootProject {
      repositories.addAll(g.rootProject.repositories)
    }
  }
}
